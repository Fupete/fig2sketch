from figformat.vector_network import decode


def test_missing_style_id():
    # Contains vertex with styleID = 1
    network = b"\n\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xa9\x98\x9f>(\xae\x04@\x01\x00\x00\x00\xbcO\xa0?\x00\x00\x00\x00\x01\x00\x00\x00U\xc7PA\x00\x00\x00\x00\x01\x00\x00\x00\x86\xd4_A,\xae\x04@\x01\x00\x00\x00\x1e{\x07A\x02$\x06A\x01\x00\x00\x00\\\xac\xba@\x02$\x06A\x01\x00\x00\x00\x01\xd5\xe6?\x00\x00\xc0?\x01\x00\x00\x00\x06\xcc\xde@O\xac\xec@\x01\x00\x00\x00\x93\xd6\xea@Q\xac\xec@\x01\x00\x00\x00\xac\xf6GA\x00\x00\xc0?\x00\x00\x00\x00\x00\x00\x00\x00>\x0b5\xbfG\xe8N\xbf\x01\x00\x00\x00\x02w\x89\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x008w\x89?\x00\x00\x00\x00\x03\x00\x00\x00\x00\x0b5?\xfc\xe7N\xbf\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x10}2\xbf\x98\xfcK?\x05\x00\x00\x00\xf8|2?\x80\xfcK?\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\xfd\xcb=\x00!\xe9=\x08\x00\x00\x00@\xfc\xcb\xbd@ \xe9=\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00"
    result = decode({"blobs": [{"bytes": network}]}, 0, {"x": 1, "y": 1}, {0: {}})
    assert result["vertices"][0]["style"] == {"styleID": 1}
